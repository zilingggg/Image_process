<table>軟體產業與軟體工程<table> 
 影片中主要在講述目前軟體的進步，一個專案從原本的半年縮短為一個晚
上，讓軟體產業的發展更加快速。在市面上常見的共享平台，如:Airbnb、
Uber，本身雖無產品，但結合了產業，統整了消費者的需求，提供人們更加全
面的消費模式。又如目前如雨後春筍般冒出的各種電商平台，產業競爭激烈，
提供一個穩定、透明的平台，並根據時代進行調整，才能在這之中脫穎而出。
 而建構更貼近使用者、穩定並創新的軟體需要掌握三個面向:需求
(People)、技術(Technology)、流程(Process)。而這些事需要一整個團隊互相
協助才能創造出來的。因此在現在這個不斷創新的時代和多樣多變的技術，我
們應該努力地從專精單方面的 I 型人才轉變多方面精通的 T 型人才，以增加自
身的競爭能力。
<table>軟體工程流程與團隊 <table>
 軟體工程較正式的說法是指:將系統化、規範的、可度量衡的方法用於軟體
的開發、執行和維護，即將工程化應用於軟體開發中。而軟體開發通常會進行:
一、需求分析:了解客戶需求，分析系統的可能性和需求的一致性及正確性。注
重”What”，透過情境思考來引領需求分析。
二、設計:發掘方案、實作方式或演算法將軟體製作出來，並將需求轉換為系
統。注重”How”和”Change”。
三、實作:透過程式語言所設計的內容軟化為可執行的軟體。
四、測試:進行檢測，測試軟體是否符和需求。
而在整個過程中應該要持續進行專案管理(確認目前達到得系統進展是否符合預
期)。
 專案(Project):針對某一項獨特與唯一的任務，採取一系列的行動來完成
既定目標與交付任務的工作
軟體專案(Software Project):以開發或維護軟體系統為目標的專案，通常
需要大型團隊，多人合作，內容通常包含專案規畫與進度追蹤。
在軟體專案中可能參與的角色包含以下幾個:
1.客戶、主管:提供產品需求擷取與分析,參與所有開發流程。
2.系統分析師 SA:研究應用領域、需求分析，聯繫使用者與開發人員，是軟體
使用者和開發者中的橋樑。
3.程式設計師 PG:撰寫程式碼，在某些地方稱之為研發人員。
4.測試工程師 ST:測試軟體是否存在錯誤或缺陷，某些地方是 QA 扮演此角色。
5.使用者體驗設計師 UX:關注產品使用者感受,規劃流暢的操作邏輯，創造好的
使用者體驗。
6.使用者介面設計師 UI:關注使用者介面布局,視覺化體現操作流程。
7.前端工程師 F2E: 也稱為前端 Web 開發人員，負責選擇、開發與測試網站的
使用者介面,設計網站外觀和功能。
8.客戶支援工程師 FAE:負責售前、售後支援工作。熟悉功能特性與客戶
溝通協調並提供技術支援。
<table>敏捷開發方法-Scrum <table>
 在敏捷宣言中能看出個人與互動重於流程與工具、軟體重於文件、客戶合
作重於合約協商、回應變化重於遵循計畫。而目前熟知的 Scrum 是一種敏捷的
方式，用於館利軟體開發專案，反覆評估目標。和原先的定義式流程:指令與控
制、強調計畫、應用變更變更控制機制,更改為實務流程: 根據歷程來學習、擁
抱改變、觀察並調適,較適合複雜或無法預期的軟體開發工程。
 Stacey Matrix 將專案根據 How 和 What 兩個面向，可分為 Simple、
Complicated、Complex、Chaotic 四種複雜程度。傳統瀑布式模型可能只能因
應 Simple 專案。當面對 Complicated 與 Complex 專案則需要更靈活的作法。
 Scrum 的開發時程:每次衝刺(Sprint)為固定期間（1-4 週）。只須一個團
隊、一個開始日期、一個衝刺長度即可開始,不須完整產品需求的規劃。Scrum
的目標為在最短的時間內，將最有價值的東西創造出來。
 在 Serum Team 中有三種主要角色
•Product Owner(產品擁有者)：定義實現願景的產品特性，包括功能與品質需
求。
• Development Team (開發團隊)：根據需求進行專案開發。
•Serur Master ：協助團隊自主發揮功能、為團隊排除障礙。
 Scrum 的產出可分為:
一、產品待辦清單(Product Backlog): 系統的需求，通常以使用者故事呈現。
包括產品需求特性、價值預估、時程預估、優先序等。是展示交付給 Product 
Owner 的最小單位。
二、工作待辦清單(Sprint Backlog):從 Product Backlog 選取的 PBI，再將
PBI 拆解成多項 工作任務，由開發團隊領取，於 Sprint 中完成。
三、潛在可發布增量(Potentially Releasable Increment, PRI):
有時僅簡稱為增量（Increment）。增量是在 Sprint 所增加的軟體功能，是可
以随時交付給客戶的軟體版本，應是可用的(Usable)的版本。每一次增量都是
基於上一次的增量進行擴增的。
<table>程式碼版本控制簡介 <table>
 Git 是一個版本控制系統，版本控制系統分成三個點:建立版本(保留檔案
的最新狀態)、同步版本(與他人共享最新動態)、回復版本(回朔某個時間點)。
一、Git 的常用指令:
git init:目前的資料夾初始化
git init demo:新增 demo 資料夾並替她初始化
二、查看狀態:
git status:顯示分支名稱、提交歷史紀錄和檔案
三、設定使用者姓名跟信箱:
--local:對系統內所有使用者配置，影響範圍大
--global:使用者範圍設定配置，影響範圍中
--system:對系統內所有使用者配置，影響範圍小
四、config 常用指令:
git config --global user.name "demo_user":設定使用者名稱
git config --global user.email demo_user@demo.com :設定
使用者信箱
git config --global alias.st "status":設定 status 暱稱
git config –list:查看設定
五、add 常用指令:
git add README.md:將指定的檔案建立 index
git add:將目前目錄現在更變建立 index
git add –all:將所有變動的檔案建立 index
六、commit 常用指令:
git commit-m "備註訊息" :新增一筆提交紀錄
git commit -a -m "備註訊息" :git add .+ git commit -m
軟體測試簡介 
 只要寫程式就會有 bug，在一個程式的製作過程中，Developer 和
Tester 都是不可或缺的。軟體測試也分成不同種類，有商務導向、技術導
向、支援程式設計和評估專案，在這之中又分了四個面向:
一、功能驗收測驗(自動化)
二、探索性測驗(手動化)
三、系統整合、整合測試、單元測試(自動化):黑箱、白箱測試
四、非功能性驗收測試(手動/自動化):壓力測試、跨平台測試、安全測試
